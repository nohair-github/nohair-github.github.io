###################################################################
# pf-badhost 0.5 MacOS Installation Instructions 
# Copyright 2018-2021 Jordan Geoghegan <jordan@geoghegan.ca>
###################################################################

###################################################################
# Updated for Mac OS 12.6 'Monterey' 11 by gsb
###################################################################

###################################################################
# Table of Contents:
###################################################################

* Fresh Install Instructions

* Post Install Notes


###################################################################
# Fresh Installation Guide
###################################################################

1. a.) Create a new user (we'll call ours "_pfbadhost"):
   The user should be created with default shell of "nologin" and an empty
   password (disables password logins)
   NOTE: Make sure you set the "UniqueID" and "PrimaryGroupID" to an unused value!
	# dscl . -create /Users/_pfbadhost
	# dscl . -create /Users/_pfbadhost UserShell /sbin/nologin
	# dscl . -create /Users/_pfbadhost RealName â€œ_pfbadhost"
	# dscl . -create /Users/_pfbadhost UniqueID 1051  # Pick an unused UID here

	# dscl . -create /Groups/_pfbadhost
	# dscl . -create /Groups/_pfbadhost name _pfbadhost
	# dscl . -create /Groups/_pfbadhost gid 1051 # Pick an unsued number
	# dscl . -create /Groups/_pfbadhost GroupMembership _pfbadhost
   add:
	# dscl . -create /Users/_pfbadhost PrimaryGroupID 1051
  
If you need to find and unused UID and GID, 'dscl . -list /Users UniqueID' and 'dscl . -list /groups PrimaryGroupID'.
Generally GIDs and UIDs above 1050 are free from use.


2) Download script:
	$ curl https://geoghegan.ca/pub/pf-badhost/0.5/pf-badhost.sh


3) a. Install script with appropriate permissions:
	# install -m 755 -o root -g bin pf-badhost.sh /usr/local/bin/pf-badhost

   b. Edit script (if you want) to change 1st line shebang to #!/binzsh

4) Create required files:
	# install -m 640 -o _pfbadhost -g wheel /dev/null /etc/pf-badhost.txt
	# install -d -m 755 -o root -g wheel /var/log/pf-badhost
	# install -m 640 -o _pfbadhost -g wheel /dev/null /var/log/pf-badhost/pf-badhost.log
	# install -m 640 -o _pfbadhost -g wheel /dev/null /var/log/pf-badhost/pf-badhost.log.0.gz
        and:
	# install -m 640 -o _pfbadhost -g wheel /dev/null /var/log/pf-badhost/pf-update.log

5.a) Install GNU sort and RipGrep:
	# brew install coreutils ripgrep

5.b) OPTIONAL: Install mawk for improved performance:
	# brew install mawk

6) Give "_pfbadhost" user permission to use sudo without a password:
   Run "sudo visudo" and then add the following line near the end of the file:

	_pfbadhost      ALL = (ALL) NOPASSWD: ALL

7) Run pfbadhost as user "_pfbadhost" using the "-O macos" argument:
        # sudo -u _pfbadhost pf-badhost -O macos

8) Check to see if pf-badhost run successfully
   a. Did the file /etc/pf-badhost.txt get updated?
   b. Check the log /var/log/pf-badhost/pf-badhost.log.

9) Create a process to update pf-badhost daily

    a. cron script
        # crontab -u _pfbadhost -e
        ...
        @daily  pf-badhost -O macos
        ...

    However, this is not the Apple(R) way and cron may well be deprecated in the future.

    b. create a LaunchAgent which runs pf-badhost every night
        # nano /Library/LaunchDaemons/nightly.pf-badhost.update.plist

	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
	<plist version="1.0">
	<dict>
	    <key>Label</key>
	        <string>nightly.pf-badhost.update</string>
	    <key>Program</key>
	        <string>/usr/bin/sudo</string>
	    <key>ProgramArguments</key>
	        <array>
		<string>-u</string>
		<string>_pfbadhost</string>
		<string>/usr/local/bin/pf-badhost</string>
		<string>-O</string>
		<string>macos</string>
	        </array>
	    <key>StandardErrorPath</key>
	        <string>/var/log/pf-badhost/pf-update.log</string>
	    <key>StandardOutPath</key>
	        <string>/var/log/pf-badhost/pf-update.log</string>
	    <key>StartCalendarInterval</key>
	        <array>
		<dict>
			<key>Hour</key>
			<integer>2</integer>
			<key>Minute</key>
			<integer>15</integer>
		</dict>
	        </array>
	    <key>UserName</key>
	        <string>_pfbadhost</string>
	</dict>
    </plist>


10) If this is a laptop or a host which is turned on and off, we can create another script which runs at boot,
    checks if /etc/pf-badhost.txt has been recently updated, and updates it as necessary.

    nano /usr/local/bin/refresh_pf-badhosts_list

    #! /bin/zsh

    # Script (1) checks date of last update of /etc/pf-badhost.txt and, if more than 24 hours,
    # (2) checks if there is an active internet connection, and if so,
    # (3) runs '/usr/local/bin/pf-badhost -O macos'.
    # But, if there is no connection, (4) the script sleeps for 30 sec then retries x 2 then fails.
    # If the pf-badhost list is <24 hours old, nothing is done
    # (and the regular pf-badhost update LaunchAgent will run as scheduled).

    # redirect stdout/stderr to log file
    exec > /var/log/pf-badhost/pf-update.log 2>&1
    date
    if [[ -e /etc/pf-badhost.txt ]]; then
        file_mtime=$(stat -f %m /etc/pf-badhost.txt)
        current_time=$(date +%s)
        file_age=$(($current_time - $file_mtime))

        if [[ $file_age -ge 86400 ]]; then
            n=0
            print "\n/etc/pf-badhost.txt is more than 24 hours old - checking for internet connection"
            if [ "$n" -lt 3 ]; then
                nc -w5 -z www.binarydefense.com 443 &>/dev/null
                if [[ $? -eq 0 ]]; then
                    print "internet connection active"
                    print "now running '/usr/local/bin/pf-badhost -O macos'"
                    /usr/local/bin/pf-badhost -O macos
                    if [[ $? -eq 0 ]]; then
                        print "pfbadhost completed sucessfully\n"
                        exit 0
                    else
                        print "pf-badhost script did not sucessfully run - exiting\n"
                        exit 1
                    fi
                else
                    print "internet connection not available - sleeping for 30 seconds ..."
                    n=$((n+1))
                    if [[ $n -eq 3 ]]; then
                        print "internet connection failed - exiting\n"
                        exit 1
                    fi
                fi
                sleep 30
            fi
        else
            print "/etc/pf-badhost.txt is less than 24 hours old - exiting\n"
            exit 0
        fi
    else
        print "/etc/pf-badhost.txt does not exist - exiting\n"
        exit 1
    fi

    Change ownership and permissions on script:
    # sudo chown root:bin /usr/local/bin/refresh_pf-badhosts_list
    # sudo chmod 755 /usr/local/bin/refresh_pf-badhosts_list

    And now create the LaunchAgent which runs the script at login of any user:

    # sudo nano /Library/LaunchAgent/refresh_pf-badhost_list.plist

    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
        <key>Label</key>
	        <string>refresh_pf-badhost_list</string>
        <key>Program</key>
		<string>/usr/local/bin/refresh_pf-badhost_list</string>
        <key>StandardErrorPath</key>
		<string>/var/log/pf-badhost/pfctl.log</string>
        <key>StandardOutPath</key>
		<string>/var/log/pf-badhost/pfctl.log</string>
        <key>RunAtLoad</key>
		<true/>
    </dict>
    </plist>


11) Setting up a pf firewall in MacOS: There are 3 ways to run pf on MacOS:
    a. You can start pf directly and not invoke any other firewall in System Preferences > Security & Privacy
    b. You can start Apple's socketfilterfw by selecting System Preferences > Security & Privacy > Firewall and click
       "Turn On Firewall." But, do not select "Enable stealth mode" under "Firewall Options." Then you can start your own
       pf. These two firewalls work fine together operating as separate processes.
    c. You can turn on Apple's firewall (socketfilterfw) and also click "Enable stealth mode" to start pf.
       This will start pf but adds additional rules within anchors which block icmp among other things.

    We will use option a or b here and start our own pf instance.

    i. Back up the default pf.conf:

    # sudo cp /etc/pf.conf /etc/pf.conf.bak

    ii. Create a new pf.conf by editing the existing pf.conf:

    # sudo nano /etc/pf.conf
   
    The final pf.conf should look like this:

    #
    # Default PF configuration file.
    #
    # This file contains the main ruleset, which gets automatically loaded
    # at startup.  PF will not be automatically enabled, however.  Instead,
    # each component which utilizes PF is responsible for enabling and disabling
    # PF via -E and -X as documented in pfctl(8).  That will ensure that PF
    # is disabled only when the last enable reference is released.
    #
    # Care must be taken to ensure that the main ruleset does not get flushed,
    # as the nested anchors rely on the anchor point defined here. In addition,
    # to the anchors loaded by this file, some system services would dynamically 
    # insert anchors into the main ruleset. These anchors will be added only when
    # the system service is used and would removed on termination of the service.
    #
    # See pf.conf(5) for syntax.
    #

    table <pfbadhost> persist file "/private/etc/pf-badhost.txt"

    #
    # com.apple anchor point
    #
    scrub-anchor "com.apple/*"
    nat-anchor "com.apple/*"
    rdr-anchor "com.apple/*"
    dummynet-anchor "com.apple/*"
    anchor "com.apple/*"
    load anchor "com.apple" from "/etc/pf.anchors/com.apple"

    # Rules for egress interface

    block in quick on egress from <pfbadhost>
    block out quick on egress to <pfbadhost>

    The added lines may be overwritten by system updates so check if you update.
    So back your changes up:

    # sudo nano cp /etc/pf.conf /etc/pf.conf.modified

    iii. Create a LaunchAgent that starts this pf instance on boot:
    I recommend using the LaunchControl app, but the plist file can be written directly.
    
    # sudo nano /Library/LaunchDaemons/pf.start.plist

    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
        <key>Disabled</key>
        <false/>
        <key>Label</key>
            <string>pf.start</string>
        <key>ProgramArguments</key>
            <array>
                <string>/sbin/pfctl</string>
                <string>-Ef</string>
                <string>/etc/pf.conf</string>
            </array>
        <key>RunAtLoad</key>
            <true/>
        <key>WorkingDirectory</key>
            <string>/var/run</string>
    </dict>
    </plist>

12) To enable additional features such as IPv6, Subnet Aggregation, Geo-Blocking, 
   Bogon Filtering or Authlog Scanning open "/usr/local/bin/pf-badhost" with     
   your text editor of choice and find the "User Configuration Area" near the top   
   of the file where you can enable features by setting their value to "1"
   ---
   See the "Notes" section below for more info o
 
   I would recommend you carefully read the part on Bogon Filtering, enable bogon filtering
   for IPv4 and IPv6, but exclude your local subnets in the section a bit further down.


13) Now reboot and this should start pf and the script to update pf if it /etc/pf-badhost.txt
    if it is over 24 hours old. Check is these occurred by reading the /var/log/pf-badhost/pf-update.log

Yay! pf-badhost is now installed!

Please read the man page for information on how to configure pf-badhost.
The manpage can be found here: https://www.geoghegan.ca/pub/pf-badhost/0.5/man/man.txt

To receive notification of new pf-badhost releases and updates please send an email
to 'announce@geoghegan.ca' with a subject line and body of "subscribe pf-badhost"
 

###################################################################
# Post Install Notes:
###################################################################

1) To add custom rules or enable features, or add alternate blocklists, 
   See the "User Configuration Area" located at the top of the script.
   This area serves as a built in config file, so please feel free to 
   edit it and experiment with all the features available within.
   ---
   Note: Most options can also be configured from the command line

2) NOTE: authlog analysis is not supported on MacOS

3) The script is able to detect which (if any) subnet aggregation utilities are 
   installed and will try to "Do The Right Thing(tm)" and fallback to the best 
   available option. If no subnet aggregation utility is found, the script
   will fallback to using a pure Perl IPv4 aggregator if Perl is installed. 
   Despite its name, "aggregate6" supports both IPv4 and IPv6 addresses and is
   written in Python, whereas the "aggregate" utility supports only IPv4 
   addresses and is written in C and uses less memory and runs slightly faster.
   If both utilities are installed, the C based "aggregate" utility will be 
   preferred for IPv4 aggregation, but the script will happily function if only 
   one or the other is installed (or neither).
   ---
   Note: Subnet aggregation can be enabled with the '-A' switch on the commandline.

   * "aggregate" can be installed via: # brew install aggregate
   * "aggregate6" can be installed via: # pip install aggregate6

   * The experimental aggregator "aggy" can be installed like so:
	...
	# brew install go
	$ curl https://geoghegan.ca/pub/aggy/0.1/aggy.go
	$ go build aggy.go
	# install -m 755 -o root -g bin aggy /usr/local/bin/aggy
	...


4) If you intend to run pf-badhost on a LAN or are using NAT etc, you will 
   want to negate your local subnet range from the filter. 
   This can be equally achieved via four different methods:

   i) Specify rule on command line (requires updating cron job):
	$ pf-badhost -O macos -r '!192.0.2.0/24' -r '!2001:db8::/64'

  ii) Specify path to text file containing list of rules (1 per line):
	$ pf-badhost -O macos -w '/path/to/rules.txt'

 iii) Edit built-in config file:
	# vi /usr/local/bin/pf-badhost
	...
	# User Defined Rules:
	!192.0.2.0/24
	!2001:db8::/64
	...

  iv) Conversely, you can add a pass quick rule to your pf.conf appearing BEFORE 
      the pf-badhost rules allowing traffic to and from your local subnet so that
      you can still access your gateway and any DNS servers.
      Something like this should do:

	# vi /etc/pf.conf
	...
	pass in quick on egress from 192.0.2.0/24
	pass out quick on egress to 192.0.2.0/24
	table <pfbadhost> persist file "/etc/pf-badhost.txt"
	block in quick on egress from <pfbadhost>
	block out quick on egress to <pfbadhost>
	...
